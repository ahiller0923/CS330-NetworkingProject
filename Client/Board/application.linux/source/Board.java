/* autogenerated by Processing revision 1277 on 2021-11-30 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.lang.Math;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Timer;
import java.util.Timer;
import java.util.TimerTask;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.Arrays;
import java.nio.ByteBuffer;
import java.lang.Math;
import java.awt.Color;
import java.util.concurrent.TimeUnit;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Board extends PApplet {




Protocol protocol;
boolean restart = false;
Game game;
RequestUpdate requestUpdate;
InetAddress server;
int ms = 1000/30;
long startTime;

 public void setup() {
  /* size commented out by preprocessor */;
  game = new Game();
  try {
    //server = InetAddress.getByName("155.98.39.148");
    server = InetAddress.getLocalHost();
    protocol = new Protocol(server, 8081, 1000, game);
    //protocol.Connect();
  } 
  catch (Exception ex) {
    ex.printStackTrace();
  }
  
  requestUpdate = new RequestUpdate(protocol);
  Thread networkThread = new Thread(requestUpdate, "Network");
  networkThread.start();
  
  Timer timer = new Timer();
  ManageGameState update = new ManageGameState(game);
  timer.schedule(update, 0, ms);
}

 public void keyPressed() {
  game.takeInput();
}

 public void mousePressed() {
  if (mouseX >= 420 && mouseX <= 580 && mouseY >= 667 && mouseY <= 717 && game.connectedPlayers > 1) {
    int[] data = {3};
    protocol.send(data);
    startTime = System.currentTimeMillis();
    while(protocol.game.startGame != true) {
      protocol.Listen();
      if(startTime - System.currentTimeMillis() == 100) {
        protocol.send(data);
        startTime = System.currentTimeMillis();
      }
    }
  } 
}

 public void draw() {
    game.drawGameState();
}



public class Game {
  ArrayList<Player> playerList;
  ArrayList<Bonus> bonusPoints;
  boolean startGame;
  Ring boundary;
  int windowSize = 1000;
  Player localPlayer;
  int PlayersAlive;
  long ping = 0;
  int seqNum = 0;
  int lastAcked;
  int lastSent;
  Input[] inputs =new Input[60];
  int maxPlayers = 8;
  int connectedPlayers = 0;
  boolean connected = false;
  float rotation = 0;
  
  /**
  *  Contructor for Game
  */
  Game() {
    playerList = new ArrayList<Player>();
    bonusPoints = new ArrayList<Bonus>();
    
    startGame = false;
    
    boundary = new Ring(windowSize/2);
    
    // Initalize bonus points list
    for(int i = 0; i < 11; i++) {
      bonusPoints.add(new Bonus(new PVector(-1000, -1000)));
    } 
  }
  
  /**
  *  Returns the player with the inputted id
  *  @param id  identifier to search for
  *  @return  player object with matching id
  */
   public Player getPlayer(int id) {
    return playerList.get(id - 1);
  }
  
  /**
  *  Calculates the distance between two objects on a 2D plane
  *  @param x1  object 1's x-coordinate
  *  @param y1  object 1's y-coordinate
  *  @param x2  object 2's x-coordinate
  *  @param y2  object 2's y-coordinate
  *  @return  distance between the two objects
  */
   public float distance(float x1, float y1, float x2, float y2) {
    return sqrt(pow(x1-x2, 2) + pow(y1 - y2, 2));
  }
  
  /**
  *  Draws the client game state on the screen
  */
   public void drawGameState() {
    background(64);
    stroke(0);
    frameRate(60);
    
    // If the game has started
    if (startGame) {
      // Draw the boundary
      boundary.draw();
      textSize(32);
      text(ping + " ms", 800, 100);
  
      for (int i = 0; i < game.playerList.size(); i++) {
        if (playerList.get(i).alive) {
          fill(255);
          playerList.get(i).draw(localPlayer.id == playerList.get(i).id);
          
          fill(255);
          if(PlayersAlive == 1) {
            textSize(100);
            text("Player " + playerList.get(i).id + " wins!", 500, 500);
          }
        }
      }
      
      for (int i = 0; i < bonusPoints.size(); i++) {
        Bonus point = bonusPoints.get(i);
        point.draw();
      }
    }
    // If waiting for the game to start
    else if(connected) {
      textSize(100);
      textAlign(CENTER);
      text("Waiting for Players...", 500, 500);
      textSize(32);
      text(connectedPlayers + " / " + maxPlayers + " Players", 500, 600);
      
      if (connectedPlayers > 1) {
        rectMode(CORNER);
        text("Start Game", 500, 700);
        noFill();
        stroke(255);
        rect(420, 667, 160, 50);
      }
    }
    
    else {
      // Credit to Mann from open processing.org for the loading animation https://openprocessing.org/sketch/822494
      frameRate(16);
      fill(0,0,0,35);
      rectMode(CENTER);
      rect(width/2,height/2,width,height);
      translate(width/2,height/2);
      rotate(rotation);
      fill(255,255,255);
      ellipse(50,50,20,20);
      rotation=rotation+.5f;
    }
    
  }
  
  /**
  *  Stores local user input in input array and sends it to the server
  */
   public void takeInput() {
    Input input = localPlayer.takeInput(seqNum);
    if(input != null) {
      inputs[seqNum] = input;
      lastSent = seqNum;
      seqNum++;
     
      if(seqNum == 60) {
        seqNum = 0;
      }
      
      sendInput(input);
    }
  }
  
  /**
  *  Sends input to the server
  *  @param input  input to be sent to the server
  */
   public void sendInput(Input input) {
    int[] data = new int[4];
    data[0] = 1;
    data[1] = input.seq;
    data[2] = game.localPlayer.id;
    data[3] = input.value;
   
    protocol.send(data);
  }
}
 
public class Input {
  int seq;
  int value;
  int timeSinceTransmission;
  boolean ack = false;
  
  /**
  *  Constructor for input
  *  @param seqNum  interger indicating where in the order of inputs this one falls
  *  @param inputVal  integer indicating what keypress this input represents
  */
  Input(int seqNum, int inputVal) {
    seq = seqNum;
    value = inputVal;
  }
}





public class ManageGameState extends TimerTask {
  Game game;
  ArrayList<Game> predictions;
  ArrayList<Game> state;
  long avgLatency;
  int tick = 0;
  
  
  ManageGameState(Game activeGame) {
    game = activeGame;
    avgLatency = game.ping;
  }
  /**
  *  Provides client-side prediction
  *  Periodically update player positions based on their current velocity.
  *  Track if a player collects a bonus point and preemptively remove it
  *  Check if local player inputs have been acknowledged by the server and retransmit unacknowledged inputs every 60 ms
  */
  public void run() {
    // Update position
     for (int i = 0; i < game.playerList.size(); i++) {
       Player player = game.playerList.get(i);
       if (player.alive) {
         player.position.add(game.playerList.get(i).velocity);
       }
       
       for(int y = 0; y < game.bonusPoints.size(); y++) {
           Bonus point = game.bonusPoints.get(y);
           if (game.distance(player.position.x, player.position.y, point.position.x, point.position.y) < player.size/2) {
             game.bonusPoints.get(y).position = new PVector(-1000, -1000);
             player.size += 5;
         }
       }
     }
     
     for (int i = game.lastAcked; i != game.lastSent; i++) {
       if(game.inputs[i] != null) {
         if(game.inputs[i].ack == false) {
           if(game.inputs[i].timeSinceTransmission > 60) {
             game.sendInput(game.inputs[i]);
             game.inputs[i].timeSinceTransmission = 0;
             System.out.println("Retransmitted");
           }
           else {
             game.inputs[i].timeSinceTransmission += 16;
           }
         }
       }
       
       if(i == 59) {
         i = -1;
       }
       else {
         break;
       }
     }
   } 
}







public class Protocol {
  byte[] incomingBuf;
  byte[] outgoingBuf;
  DatagramPacket outgoingPacket;
  DatagramPacket incomingPacket;
  InetAddress server;
  DatagramSocket socket;
  int port;
  String state;
  Game game;
  ManageGameState updateTask;
  boolean packetLoss = false;
  
  /**
  *  Constructor for protocol
  *  @param target  ip address of the server
  *  @param portNumber  port to contact server through
  *  @param bufSize  integer indicating what size the outgoing and incoming buffers should be
  *  @param localGame  the local game object which will maintain the client game state
  */
  Protocol (InetAddress target, int portNumber, int bufSize, Game localGame) {
    outgoingBuf = new byte[bufSize];
    incomingBuf = new byte[bufSize];
    incomingPacket = new DatagramPacket(incomingBuf, incomingBuf.length);
    server = target;
    port = portNumber;
    game = localGame;
    state = "WAITING";
    try {
      socket = new DatagramSocket();
    }
    catch(Exception ex) {
      System.out.println(ex);
    }
  }
    
  /**
  *  Formats an array of int data into an array of byte data wrapped in a DatagramPacket
  *  @param intData  array of integer values to be converted to bytes
  *  @return  Datagram Packet with integer data in byte form
  */
   public DatagramPacket prepareForTransmission(int[] intData) {
    ByteBuffer byteData = ByteBuffer.allocate(4 * intData.length);
    
    if (intData.length > 0) {
      for (int i = 0; i < intData.length; i++) {
        byteData.putInt(intData[i]);
      }
    }
    else {
      System.out.println("Transmission data is null.");
    }
    
    return new DatagramPacket(byteData.array(), byteData.array().length, server, port);
  }
  
  /**
  *  Establishes a connection with the server
  */
   public void Connect() {
    if(state == "WAITING") {
      // Create a packet with type byte of 0 (connection request)
      ByteBuffer byteBuffer = ByteBuffer.wrap(outgoingBuf);
      byteBuffer.putInt(0);
      outgoingBuf = byteBuffer.array();
      outgoingPacket = new DatagramPacket(outgoingBuf, outgoingBuf.length, server, port);
      try {
        socket.send(outgoingPacket); // Send the packet
        socket.setSoTimeout(2000); // Wait
        socket.receive(incomingPacket);
        processResponse(incomingPacket.getData()); // Process the connection data

        while(!game.connected) {
          // Connection data confirmation
          int data[] = new int[2];
          data[0] = 2;
          data[1] = game.localPlayer.id;
          send(data);

          try {
            socket.receive(incomingPacket);
          }
          catch(Exception ex) {
            System.out.println("Trying again...");
            continue; 
          }
          processResponse(incomingPacket.getData());
        }
        
        // If connection data is received, set timeout to be higher since we don't want to throw repeated exceptions while waiting for game to start
        socket.setSoTimeout(100000000);
       
      } catch(Exception ex) {
        // If any part fails, try connection again
        System.out.println("Connection Error: " + ex + "\n\r Retrying...");
        Connect();
      }
      finally {
        state = "CONNECTED";
      }
    }
  }
  /**
  *  Listens on the socket for incoming server packets and passes them along to the processResponse() function
  */
   public void Listen() {
    try {
      if(game.startGame) {
        //socket.setSoTimeout(200);
      }
      socket.receive(incomingPacket);
      processResponse(incomingPacket.getData());
    }
    catch(Exception ex) {
      ex.printStackTrace();
      return;
    }
  }
  
   public void send(int[] data) {
    outgoingPacket = prepareForTransmission(data);
    try {
      socket.send(outgoingPacket);
    }
    catch(Exception ex) {
      ex.printStackTrace();
    }
  }
  /** 
  *  Checks the type byte of the server packet and either parses the rest of the data or 
  *  performs some other functionality based on the type of the packet
  *  @param serverResponse  byte array of data from the server
  */
   public void processResponse(byte[] serverResponse) {
    ByteBuffer byteBuffer = ByteBuffer.wrap(serverResponse);
    try {
      switch(byteBuffer.getInt()) {
        case 0:
          System.out.println("Connection Data Received");
          parseData(byteBuffer, 0);
          break;
        case 1: 
          //System.out.println("Update Data Received");
          parseData(byteBuffer, 1);
          break;
        case 2:
          game.lastAcked = byteBuffer.getInt();
          game.inputs[game.lastAcked].ack = true;
          
          //System.out.println("ACKED");
          break;
          
        case 3:
          game.connectedPlayers = byteBuffer.getInt();
          break;
          
        case 4:
          game.connected = true;
          System.out.println("connected");
          break;
          
        case -1:
          System.out.println("Connection Terminated");
          state = "WAITING";
          break;
          
        default:
          System.out.println("Data not parsed");
      }
    }
    catch(Exception ex) {
      ex.printStackTrace();
    }
  }
  
  /**
  *  Parses data received from server based on the type bit. 
  *  @param byteBuffer  a buffer containing data from the server
  *  @param dataContentIndicator  an int indicating what type of packet the data belongs to
  */
   public void parseData(ByteBuffer byteBuffer, int dataContentIndicator) {
    int id = 1;
    Player Player; // local player variable to avoid repetitive get functions
    
    switch(dataContentIndicator) {
      case 0:
        if(state == "WAITING") {
          int localPlayerID = byteBuffer.getInt(); // Get the id which correlates to which player the local user is
           
          // Get all player data 
          while(byteBuffer.getInt() == 0) {
            game.playerList.add(new Player(id));
            game.PlayersAlive += 1;
            Player = game.getPlayer(id);
            
            Player.position.x = byteBuffer.getFloat();
            Player.position.y = byteBuffer.getFloat();
            Player.velocity.x = byteBuffer.getFloat();
            Player.velocity.y = byteBuffer.getFloat();
            Player.size = byteBuffer.getFloat();
            
            id++;
          }
          
          game.localPlayer = game.getPlayer(localPlayerID); // Local player is the player which has the localPlayerID
          
          game.connectedPlayers = game.playerList.size();
        }
          
        break;
        
      case 1:
        game.startGame = true; // If we receive a regular server update, that means the game has started
        
        game.ping =  (System.currentTimeMillis() - byteBuffer.getLong()); // Ping
        
        // While byte is 0, collect more player data
        while(byteBuffer.getInt() == 0) {
          if(id > game.playerList.size()) {
            game.playerList.add(new Player(id));
            game.PlayersAlive += 1;
          }
          Player = game.getPlayer(id);
          
          // Check if player has died
          if (byteBuffer.getInt() == 0) {
            if(Player.alive == true) {
              Player.alive = false;
              game.PlayersAlive -= 1;
            }
          }
          // Get alive player data from server
          else {
            Player.position.x = byteBuffer.getFloat();
            Player.position.y = byteBuffer.getFloat();
            
            Player.velocity.x = byteBuffer.getFloat();
            Player.velocity.y = byteBuffer.getFloat();
            Player.size = byteBuffer.getFloat();
          }
          
          id++;
        }
        
        int i = 0;
        
        // Get bonus point data from server
        while(byteBuffer.getInt() == 0) {
          game.bonusPoints.get(i).position = new PVector(byteBuffer.getFloat(), byteBuffer.getFloat());
          i++;
        }
        
        // Put collected vectors out of sight
        while(i < game.bonusPoints.size()) {
          game.bonusPoints.get(i).position = new PVector(-1000, -1000);
          i++;
        }
        
        break;
      }
    }
  }
public class RequestUpdate implements Runnable{
  Protocol protocol;
  
  /**
  *  Constructor for RequestUpdate
  *  @param activeProtocol  protocol object which Listen() should be run from
  */
  RequestUpdate(Protocol activeProtocol) {
    protocol = activeProtocol;
  }
  
  /**
  *  Function meant to be multithreaded as to allow client to listen for data and manage local state/display at the same time
  */
   public void run() {
    protocol.Connect();
    while(!protocol.socket.isClosed()) {
      protocol.Listen();
    }
  }
}


public class Bonus {
  int size;
  PVector position;;
  
  /**
  *  Constructor for bonus point
  *  @param pos  position of bonus point
  */
  Bonus(PVector pos) {
    size = 10;
    position = pos;
  }
  
   public void draw() {
    fill(255);
    ellipse(position.x, position.y, size, size);
  }
}



public class Player {
  int id;
  PVector position;
  PVector serverPosition;
  PVector velocity;
  float size;
  boolean alive;
  float m;
  Color hue;
  
  /**
  *  Constructor for player object
  *  @param identifier  integer to be set as Player's id
  */
  Player(int identifier) {
    id = identifier;
    position = new PVector();
    serverPosition = new PVector();
    velocity = new PVector(0, 0);
    size = 30;
    alive = true;
    m = (size/2) *.1f;
    hue = new Color((int)random(0, 255), (int)random(0, 255), (int)random(0, 255));
  }
  
   public void draw(boolean localPlayer) {
    fill(hue.getRGB());
    if (localPlayer) {
      textSize(50);
      text("Player " + id, 100, 100);
    }

    m = (size/2) *.1f;
    ellipse(position.x, position.y, size, size);
    fill(0);
  }
  
  /**
  *  Handles the local elements of taking input
  *  Based on keystroke, changes the player velocity
  *  Creates an input object which will eventually be stored locally and sent to the server
  *  @parm seqNum  interger indicating where this input occurred relative to others
  *  @return   input object containing seqNum and the keyCode of the key pressed
  */
   public Input takeInput(int seqNum) {
    int keyInput = 0;
     switch(keyCode) {
       case(UP):
       if (velocity.y > -3) {
         velocity.y -= 1;
         keyInput = 38;
         //System.out.println("UP");
       }
         break;
       case(DOWN):
       if (velocity.y < 3) {
          velocity.y += 1;
          keyInput = 40;
          //System.out.println("DOWN");
        }
         break;
       case(RIGHT):
        if (velocity.x < 3) {
          velocity.x += 1;
          keyInput = 39;
        }
         
         break;
       case(LEFT):
         if (velocity.x > -3) {
          velocity.x -= 1;
          keyInput = 37;
         }
         break;
       default:
         return null;
     }
     
     if(keyInput != 0) {
       return new Input(seqNum, keyInput);
     }
     else {
       return null;
     }
  }
};
public class Ring {
  int size;
  int position;
  /**
  *  Constructor for ring object
  *  pos  position of ring (will be mirrored for x and y)
  */
  Ring(float pos) {
    size = 900;
    position = (int)pos;
  }
  
   public void draw() {
    noFill();
    stroke(255);
    ellipse(position, position, size, size);
  }
}


  public void settings() { size(1000, 1000); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Board" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
