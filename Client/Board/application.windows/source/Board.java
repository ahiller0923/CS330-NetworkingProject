/* autogenerated by Processing revision 1277 on 2021-11-21 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.lang.Math;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Timer;
import java.util.Timer;
import java.util.TimerTask;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.Arrays;
import java.nio.ByteBuffer;
import java.lang.Math;
import java.awt.Color;
import java.util.concurrent.TimeUnit;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Board extends PApplet {




Protocol protocol;
boolean restart = false;
Game game;
RequestUpdate requestUpdate;
InetAddress server;
int ms = 1000/30;

 public void setup() {
  /* size commented out by preprocessor */;
  game = new Game();
  try {
    server = InetAddress.getByName("155.98.36.8");
    //server = InetAddress.getLocalHost();
    protocol = new Protocol(server, 8081, 1000, game);
    protocol.Connect();
  } 
  catch (Exception ex) {
    ex.printStackTrace();
  }
  
  requestUpdate = new RequestUpdate(protocol);
  Thread networkThread = new Thread(requestUpdate, "Network");
  networkThread.start();
  
  Timer timer = new Timer();
  ManageGameState update = new ManageGameState(game);
  timer.schedule(update, 0, ms);
}

 public void keyPressed() {
  game.takeInput();
}

 public void draw() {
    game.updateGameState();
}



public class Game {
  ArrayList<Player> playerList;
  ArrayList<Bonus> bonusPoints;
  boolean startGame;
  Ring boundary;
  int windowSize = 1000;
  Player localPlayer;
  int PlayersAlive;
  long ping = 0;
  int seqNum = 0;
  int lastAcked;
  int lastSent;
  Input[] inputs =new Input[60];
  
  Game() {
    playerList = new ArrayList<Player>();
    bonusPoints = new ArrayList<Bonus>();
    startGame = false;
    boundary = new Ring(windowSize/2);
    bonusPoints = new ArrayList<Bonus>();
    
    // Initalize bonus points list
    for(int i = 0; i < 11; i++) {
      bonusPoints.add(new Bonus(new PVector(-1000, -1000)));
    } 
  }
  
   public Player getPlayer(int id) {
    return playerList.get(id - 1);
  }
  
  
   public float distance(float x1, float y1, float x2, float y2) {
    return sqrt(pow(x1-x2, 2) + pow(y1 - y2, 2));
  }
  
   public void updateGameState() {
    background(64);
    stroke(0);
    // Draw the boundary
    boundary.draw();

    for (int i = 0; i < game.playerList.size(); i++) {
      if (playerList.get(i).alive) {
        fill(255);
        playerList.get(i).draw(localPlayer.id == playerList.get(i).id);
        
        fill(255);
        text(ping + " ms", 800, 100);
        
        if(PlayersAlive == 1) {
          text("Player " + playerList.get(i).id + " wins!", 100, 500);
        }
      }
    }
    
    for (int i = 0; i < bonusPoints.size(); i++) {
      Bonus point = bonusPoints.get(i);
      point.draw();
    }
  }
  
   public void takeInput() {
    Input input = localPlayer.takeInput(seqNum);
    if(input != null) {
      inputs[seqNum] = input;
      lastSent = seqNum;
      seqNum++;
     
      if(seqNum == 60) {
        seqNum = 0;
      }
      
      sendInput(input);
    }
  }
  
   public void sendInput(Input input) {
    int[] data = new int[4];
    data[0] = 1;
    data[1] = input.seq;
    data[2] = game.localPlayer.id;
    data[3] = input.value;
   
    protocol.send(data);
  }
}
 
public class Input {
  int seq;
  int value;
  boolean ack = false;
  
  Input(int seqNum, int inputVal) {
    seq = seqNum;
    value = inputVal;
  }
}





public class ManageGameState extends TimerTask {
  Game game;
  ArrayList<Game> predictions;
  ArrayList<Game> state;
  long avgLatency;
  int tick = 0;
  
  
  ManageGameState(Game activeGame) {
    game = activeGame;
    avgLatency = game.ping;
  }
  
  public void run() {
    // Update position
     for (int i = 0; i < game.playerList.size(); i++) {
       Player player = game.playerList.get(i);
       if (player.alive) {
         if (player.serverPosition != player.position) {
           //player.position.x = player.position.x * 1 + player.serverPosition.x * 0;
           //player.position.y = player.position.y * 1 + player.serverPosition.y * 0;
         }
         player.position.add(game.playerList.get(i).velocity);
         
       /*for(int y = 0; y < game.bonusPoints.size(); y++) {
           Bonus point = game.bonusPoints.get(y);
           if (game.distance(player.position.x, player.position.y, point.position.x, point.position.y) < player.size/2) {
             game.bonusPoints.remove(y);
             player.size += 5;
         }*/
       }
     }
     
     for (int i = game.lastAcked; i != game.lastSent; i++) {
       if(game.inputs[i] != null) {
         if(game.inputs[i].ack == false) {
           game.sendInput(game.inputs[i]);
           //System.out.println("Retransmitted");
         }
       }
       
       if(i == 59) {
         i = -1;
       }
       else {
         break;
       }
     }
   } 
}







public class Protocol {
  byte[] incomingBuf;
  byte[] outgoingBuf;
  DatagramPacket outgoingPacket;
  DatagramPacket incomingPacket;
  InetAddress server;
  DatagramSocket socket;
  int port;
  String state;
  Game game;
  ManageGameState updateTask;
  boolean packetLoss = false;
  
  Protocol (InetAddress target, int portNumber, int bufSize, Game localGame) {
    outgoingBuf = new byte[bufSize];
    incomingBuf = new byte[bufSize];
    incomingPacket = new DatagramPacket(incomingBuf, incomingBuf.length);
    server = target;
    port = portNumber;
    game = localGame;
    state = "WAITING";
    try {
      socket = new DatagramSocket();
    }
    catch(Exception ex) {
      System.out.println(ex);
    }
  }
    
  // Prepare data to be sent
   public DatagramPacket prepareForTransmission(int[] intData) {
    ByteBuffer byteData = ByteBuffer.allocate(4 * intData.length);
    
    if (intData.length > 0) {
      for (int i = 0; i < intData.length; i++) {
        byteData.putInt(intData[i]);
      }
    }
    else {
      System.out.println("Transmission data is null.");
    }
    
    return new DatagramPacket(byteData.array(), byteData.array().length, server, port);
  }
  
  // Request connection to server
   public void Connect() {
    if(state == "WAITING") {
      ByteBuffer byteBuffer = ByteBuffer.wrap(outgoingBuf);
      byteBuffer.putInt(0);
      byteBuffer.put("Connect".getBytes());
      outgoingBuf = byteBuffer.array();
      outgoingPacket = new DatagramPacket(outgoingBuf, outgoingBuf.length, server, port);
      try {
        socket.send(outgoingPacket);
      } catch(Exception ex) {
        System.out.println("Connection Error: " + ex);
      }
      finally {
        state = "CONNECTION_REQUESTED";
        System.out.println("Connection Request Sent Successfully");
      }
    }
  }
  
   public void Listen() {
    try {
      if(game.startGame) {
        //socket.setSoTimeout(200);
      }
      socket.receive(incomingPacket);
      processResponse(incomingPacket.getData());
    }
    catch(Exception ex) {
      ex.printStackTrace();
      return;
    }
  }
  
   public void send(int[] data) {
    outgoingPacket = prepareForTransmission(data);
    try {
      socket.send(outgoingPacket);
    }
    catch(Exception ex) {
      ex.printStackTrace();
    }
  }
  
   public void processResponse(byte[] serverResponse) {
    ByteBuffer byteBuffer = ByteBuffer.wrap(serverResponse);
    try {
      switch(byteBuffer.getInt()) {
        case 0:
          System.out.println("Connection Data Received");
          parseData(byteBuffer, 0);
          break;
        case 1: 
          //System.out.println("Update Data Received");
          parseData(byteBuffer, 1);
          break;
        case 2:
          game.lastAcked = byteBuffer.getInt();
          game.inputs[game.lastAcked].ack = true;
          
          //System.out.println("ACKED");
          break;
        default:
          System.out.println("Data not parsed");
      }
    }
    catch(Exception ex) {
      ex.printStackTrace();
    }
  }
  
   public void parseData(ByteBuffer byteBuffer, int dataContentIndicator) {
    int id = 1;
    Player Player;
    
    switch(dataContentIndicator) {
      case 0:
        int localPlayerID = byteBuffer.getInt();
        
        while(byteBuffer.getInt() == 0) {
          game.playerList.add(new Player(id));
          game.PlayersAlive += 1;
          Player = game.getPlayer(id);
          
          Player.position.x = byteBuffer.getFloat();
          Player.position.y = byteBuffer.getFloat();
          Player.velocity.x = byteBuffer.getFloat();
          Player.velocity.y = byteBuffer.getFloat();
          Player.size = byteBuffer.getFloat();
          
          id++;
        }
        
        game.localPlayer = game.getPlayer(localPlayerID);
        
        state = "CONNECTED";
        
        int data[] = new int[2];
        data[0] = 2;
        data[1] = localPlayerID;
        send(data);
        
        if (byteBuffer.getInt() == 1) {
          game.startGame = true;
        }
        
        break;
        
      case 1:
        byteBuffer.getInt();
        game.ping =  (System.currentTimeMillis() - byteBuffer.getLong());
        while(byteBuffer.getInt() == 0) {
          if(id >= game.playerList.size() + 1) {
            game.playerList.add(new Player(id));
            game.PlayersAlive += 1;
          }
          Player = game.getPlayer(id);
          
          if (byteBuffer.getInt() == 0) {
            if(Player.alive == true) {
              Player.alive = false;
              game.PlayersAlive -= 1;
            }
          }
          
          else {
            //Player.position.x = .95 * Player.position.x + (1 - .95) * byteBuffer.getFloat();
            //Player.position.y = .95 * Player.position.y + (1 - .95) * byteBuffer.getFloat();
            Player.position.x = byteBuffer.getFloat();
            Player.position.y = byteBuffer.getFloat();
            
            Player.velocity.x = byteBuffer.getFloat();
            Player.velocity.y = byteBuffer.getFloat();
            Player.size = byteBuffer.getFloat();
          }
          
          id++;
        }
        
        int i = 0;
        while(byteBuffer.getInt() == 0) {
          game.bonusPoints.get(i).position = new PVector(byteBuffer.getFloat(), byteBuffer.getFloat());
          i++;
        }
        
        while(i < game.bonusPoints.size()) {
          game.bonusPoints.get(i).position = new PVector(-1000, -1000);
          i++;
        }
        
        break;
      }
    }
  }

public class RequestUpdate implements Runnable{
  Protocol protocol;
  
  RequestUpdate(Protocol activeProtocol) {
    protocol = activeProtocol;
  }
  
   public void run() {
    while(!protocol.socket.isClosed()) {
      protocol.Listen();
    }
  }
}

public class State {
  
}


public class Bonus {
  int size;
  PVector position;;
  
  Bonus(PVector pos) {
    size = 10;
    position = pos;
  }
  
   public void draw() {
    fill(255);
    ellipse(position.x, position.y, size, size);
  }
}



public class Player {
  int id;
  PVector position;
  PVector serverPosition;
  PVector velocity;
  float size;
  boolean alive;
  float m;
  Color hue;
  
  Player(int identifier) {
    id = identifier;
    position = new PVector();
    serverPosition = new PVector();
    velocity = new PVector(0, 0);
    size = 30;
    alive = true;
    m = (size/2) *.1f;
    hue = new Color((int)random(0, 255), (int)random(0, 255), (int)random(0, 255));
  }
  
   public void draw(boolean localPlayer) {
    fill(hue.getRGB());
    if (localPlayer) {
      textSize(72);
      text("Player " + id, 50, 100);
    }

    m = (size/2) *.1f;
    ellipse(position.x, position.y, size, size);
    fill(0);
  }

   public Input takeInput(int seqNum) {
    int keyInput = 0;
     switch(keyCode) {
       case(UP):
       if (velocity.y > -3) {
         velocity.y -= 1;
         keyInput = 38;
         //System.out.println("UP");
       }
         break;
       case(DOWN):
       if (velocity.y < 3) {
          velocity.y += 1;
          keyInput = 40;
          //System.out.println("DOWN");
        }
         break;
       case(RIGHT):
        if (velocity.x < 3) {
          velocity.x += 1;
          keyInput = 39;
        }
         
         break;
       case(LEFT):
         if (velocity.x > -3) {
          velocity.x -= 1;
          keyInput = 37;
         }
         break;
       default:
         return null;
     }
     
     if(keyInput != 0) {
       return new Input(seqNum, keyInput);
     }
     else {
       return null;
     }
  }
};
public class Ring {
  int size;
  int position;
  
  Ring(float pos) {
    size = 900;
    position = (int)pos;
  }
  
   public void draw() {
    noFill();
    stroke(255);
    ellipse(position, position, size, size);
  }
}


  public void settings() { size(1000, 1000); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Board" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
