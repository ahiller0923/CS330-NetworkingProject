/* autogenerated by Processing revision 1277 on 2021-11-17 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.lang.Math;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Timer;
import java.util.Timer;
import java.util.TimerTask;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.Arrays;
import java.nio.ByteBuffer;
import java.lang.Math;
import java.awt.Color;
import java.util.concurrent.TimeUnit;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Board extends PApplet {




Protocol protocol;
boolean restart = false;
Game game;
RequestUpdate requestUpdate;
InetAddress server;
int ms = 1000/30;

 public void setup() {
  /* size commented out by preprocessor */;
  game = new Game();
  try {
    //server = InetAddress.getByName("155.98.38.76");
    server = InetAddress.getLocalHost();
    protocol = new Protocol(server, 8081, 1000, game);
    protocol.Connect();
  } 
  catch (Exception ex) {
    ex.printStackTrace();
  }
  
  requestUpdate = new RequestUpdate(protocol);
  Thread networkThread = new Thread(requestUpdate, "Network");
  networkThread.start();
  
  Timer timer = new Timer();
  ManageGameState update = new ManageGameState(game);
  timer.schedule(update, 0, ms);
}

 public void keyPressed() {
  game.getPlayer(game.localPlayerID).takeInput();
}

 public void draw() {
    game.updateGameState();
}



public class Game {
  ArrayList<Player> playerList;
  ArrayList<Bonus> bonusPoints;
  boolean startGame;
  Ring boundary;
  int windowSize = 1000;
  int localPlayerID;
  int PlayersAlive;
  long ping = 0;
  
  Game() {
    playerList = new ArrayList<Player>();
    bonusPoints = new ArrayList<Bonus>();
    startGame = false;
    boundary = new Ring(windowSize/2);
    bonusPoints = new ArrayList<Bonus>();
    
    // Initalize bonus points list
    for(int i = 0; i < 11; i++) {
      bonusPoints.add(new Bonus(new PVector(-1000, -1000)));
    } 
  }
  
   public Player getPlayer(int id) {
    return playerList.get(id - 1);
  }
  
  
   public float distance(float x1, float y1, float x2, float y2) {
    return sqrt(pow(x1-x2, 2) + pow(y1 - y2, 2));
  }
  
   public void updateGameState() {
    background(64);
    stroke(0);
    // Draw the boundary
    boundary.draw();

    for (int i = 0; i < game.playerList.size(); i++) {
      if (playerList.get(i).alive) {
        fill(255);
        playerList.get(i).draw(localPlayerID == playerList.get(i).id);
        
        fill(255);
        text(ping + " ms", 800, 100);
        
        if(PlayersAlive == 1) {
          text("Player " + playerList.get(i).id + " wins!", 100, 500);
        }
      }
    }
    
    for (int i = 0; i < bonusPoints.size(); i++) {
      Bonus point = bonusPoints.get(i);
      point.draw();
    }
  }
}
 





public class ManageGameState extends TimerTask {
  Game game;
  ArrayList<Game> predictions;
  ArrayList<Game> state;
  long avgLatency;
  int tick = 0;
  
  
  ManageGameState(Game activeGame) {
    game = activeGame;
    avgLatency = game.ping;
  }
  
  public void run() {
    // Update position
     for (int i = 0; i < game.playerList.size(); i++) {
       Player player = game.playerList.get(i);
       if (player.alive) {
         player.position.add(game.playerList.get(i).velocity);
         
       /*for(int y = 0; y < game.bonusPoints.size(); y++) {
           Bonus point = game.bonusPoints.get(y);
           if (game.distance(player.position.x, player.position.y, point.position.x, point.position.y) < player.size/2) {
             game.bonusPoints.remove(y);
             player.size += 5;
         }*/
       }
     }
   } 
}







public class Protocol {
  byte[] incomingBuf;
  byte[] outgoingBuf;
  DatagramPacket outgoingPacket;
  DatagramPacket incomingPacket;
  InetAddress server;
  DatagramSocket socket;
  int port;
  String state;
  Game game;
  ManageGameState updateTask;
  int tick;
  
  Protocol (InetAddress target, int portNumber, int bufSize, Game localGame) {
    outgoingBuf = new byte[bufSize];
    incomingBuf = new byte[bufSize];
    incomingPacket = new DatagramPacket(incomingBuf, incomingBuf.length);
    server = target;
    port = portNumber;
    game = localGame;
    state = "WAITING";
    try {
      socket = new DatagramSocket();
    }
    catch(Exception ex) {
      System.out.println(ex);
    }
  }
    
  // Prepare data to be sent
   public DatagramPacket prepareForTransmission(int[] intData) {
    ByteBuffer byteData = ByteBuffer.allocate(4 * intData.length);
    
    if (intData.length > 0) {
      for (int i = 0; i < intData.length; i++) {
        byteData.putInt(intData[i]);
      }
    }
    else {
      System.out.println("Transmission data is null.");
    }
    
    return new DatagramPacket(byteData.array(), byteData.array().length, server, port);
  }
  
  // Request connection to server
   public void Connect() {
    if(state == "WAITING") {
      ByteBuffer byteBuffer = ByteBuffer.wrap(outgoingBuf);
      byteBuffer.putInt(0);
      byteBuffer.put("Connect".getBytes());
      outgoingBuf = byteBuffer.array();
      outgoingPacket = new DatagramPacket(outgoingBuf, outgoingBuf.length, server, port);
      try {
        socket.send(outgoingPacket);
      } catch(Exception ex) {
        System.out.println("Connection Error: " + ex);
      }
      finally {
        state = "CONNECTION_REQUESTED";
        System.out.println("Connection Request Sent Successfully");
      }
    }
  }
  
   public void Listen() {
    try {
      if(game.startGame) {
        //socket.setSoTimeout(200);
      }
      socket.receive(incomingPacket);
      processResponse(incomingPacket.getData());
    }
    catch(Exception ex) {
      ex.printStackTrace();
      return;
    }
  }
  
   public void send(int[] data) {
    outgoingPacket = prepareForTransmission(data);
    try {
      //TimeUnit.MILLISECONDS.sleep(100); // Simulate latency
      socket.send(outgoingPacket);
    }
    catch(Exception ex) {
      ex.printStackTrace();
    }
  }
  
   public void processResponse(byte[] serverResponse) {
    ByteBuffer byteBuffer = ByteBuffer.wrap(serverResponse);
    try {
      switch(byteBuffer.getInt()) {
        case 0:
          System.out.println("Connection Data Received");
          parseData(byteBuffer, 0);
          break;
        case 1: 
          //System.out.println("Update Data Received");
          parseData(byteBuffer, 1);
          break;
        default:
          System.out.println("Data not parsed");
      }
    }
    catch(Exception ex) {
      ex.printStackTrace();
    }
  }
  
   public void parseData(ByteBuffer byteBuffer, int dataContentIndicator) {
    int id = 1;
    Player Player;
    
    switch(dataContentIndicator) {
      case 0:
        game.localPlayerID = byteBuffer.getInt();
        
        while(byteBuffer.getInt() == 0) {
          game.playerList.add(new Player(id));
          game.PlayersAlive += 1;
          Player = game.getPlayer(id);
          
          Player.position.x = byteBuffer.getFloat();
          Player.position.y = byteBuffer.getFloat();
          Player.velocity.x = byteBuffer.getFloat();
          Player.velocity.y = byteBuffer.getFloat();
          Player.size = byteBuffer.getFloat();
          
          id++;
        }
        
        state = "CONNECTED";
        
        int data[] = new int[2];
        data[0] = 2;
        data[1] = game.localPlayerID;
        send(data);
        
        if (byteBuffer.getInt() == 1) {
          game.startGame = true;
        }
        
        break;
        
      case 1:
        byteBuffer.getInt();
        game.ping =  (System.currentTimeMillis() - byteBuffer.getLong());
        while(byteBuffer.getInt() == 0) {
          if(id >= game.playerList.size() + 1) {
            game.playerList.add(new Player(id));
            game.PlayersAlive += 1;
          }
          Player = game.getPlayer(id);
          
          if (byteBuffer.getInt() == 0) {
            if(Player.alive == true) {
              Player.alive = false;
              game.PlayersAlive -= 1;
            }
          }
          
          else {
            //byteBuffer.getFloat();
            //byteBuffer.getFloat();
            Player.position.x = byteBuffer.getFloat();
            Player.position.y = byteBuffer.getFloat();
            
            Player.velocity.x = byteBuffer.getFloat();
            Player.velocity.y = byteBuffer.getFloat();
            Player.size = byteBuffer.getFloat();
          }
          
          id++;
        }
        
        int i = 0;
        while(byteBuffer.getInt() == 0) {
          game.bonusPoints.get(i).position = new PVector(byteBuffer.getFloat(), byteBuffer.getFloat());
          i++;
        }
        
        while(i < game.bonusPoints.size()) {
          game.bonusPoints.get(i).position = new PVector(-1000, -1000);
          i++;
        }
        
        break;
      }
    }
  }

public class RequestUpdate implements Runnable{
  Protocol protocol;
  
  RequestUpdate(Protocol activeProtocol) {
    protocol = activeProtocol;
  }
  
   public void run() {
    while(!protocol.socket.isClosed()) {
      protocol.Listen();
    }
  }
}

public class State {
  
}


public class Bonus {
  int size;
  PVector position;;
  
  Bonus(PVector pos) {
    size = 10;
    position = pos;
  }
  
   public void draw() {
    fill(255);
    ellipse(position.x, position.y, size, size);
  }
}



public class Player {
  int id;
  PVector position;
  PVector velocity;
  float size;
  boolean alive;
  float m;
  Color hue;
  
  Player(int identifier) {
    id = identifier;
    position = new PVector((int)random(200, 800), (int)random(200, 800));
    velocity = new PVector(0, 0);
    size = 30;
    alive = true;
    m = (size/2) *.1f;
    hue = new Color((int)random(0, 255), (int)random(0, 255), (int)random(0, 255));
  }
  
   public void draw(boolean localPlayer) {
    fill(hue.getRGB());
    if (localPlayer) {
      textSize(72);
      text("Player " + id, 50, 100);
    }

    m = (size/2) *.1f;
    ellipse(position.x, position.y, size, size);
    fill(0);
  }
  /* Collision physics found on processing.org shared by Ira Greenberg
     https://processing.org/examples/circlecollision.html */
     
   public void checkCollision(Player other) {

    // Get distances between the balls components
    PVector distanceVect = PVector.sub(other.position, position);

    // Calculate magnitude of the vector separating the balls
    float distanceVectMag = distanceVect.mag();

    // Minimum distance before they are touching
    float minDistance = size/2 + other.size/2;

    if (distanceVectMag < minDistance) {
      float distanceCorrection = (minDistance-distanceVectMag)/2.0f;
      PVector d = distanceVect.copy();
      PVector correctionVector = d.normalize().mult(distanceCorrection);
      other.position.add(correctionVector);
      position.sub(correctionVector);

      // get angle of distanceVect
      float theta  = distanceVect.heading();
      // precalculate trig values
      float sine = sin(theta);
      float cosine = cos(theta);

      /* bTemp will hold rotated ball positions. You 
       just need to worry about bTemp[1] position*/
      PVector[] bTemp = {
        new PVector(), new PVector()
      };

      /* this ball's position is relative to the other
       so you can use the vector between them (bVect) as the 
       reference point in the rotation expressions.
       bTemp[0].position.x and bTemp[0].position.y will initialize
       automatically to 0.0, which is what you want
       since b[1] will rotate around b[0] */
      bTemp[1].x  = cosine * distanceVect.x + sine * distanceVect.y;
      bTemp[1].y  = cosine * distanceVect.y - sine * distanceVect.x;

      // rotate Temporary velocities
      PVector[] vTemp = {
        new PVector(), new PVector()
      };
      
      vTemp[0].x  = (cosine * velocity.x + sine * velocity.y);
      vTemp[0].y  = (cosine * velocity.y - sine * velocity.x);
      vTemp[1].x  = (cosine * other.velocity.x + sine * other.velocity.y);
      vTemp[1].y  = (cosine * other.velocity.y - sine * other.velocity.x);

      /* Now that velocities are rotated, you can use 1D
       conservation of momentum equations to calculate 
       the final velocity along the x-axis. */
      PVector[] vFinal = {  
        new PVector(), new PVector()
      };

      // final rotated velocity for b[0]
      vFinal[0].x = ((m - other.m) * (vTemp[0].x * 0) + 2 * other.m * vTemp[1].x) / (m + other.m);
      vFinal[0].y = vTemp[0].y;

      // final rotated velocity for b[0]
      vFinal[1].x = ((other.m - m) * vTemp[1].x + 2 * m * vTemp[0].x) / (m + other.m);
      vFinal[1].y = vTemp[1].y;

      // hack to avoid clumping
      bTemp[0].x += vFinal[0].x;
      bTemp[1].x += vFinal[1].x;

      /* Rotate ball positions and velocities back
       Reverse signs in trig expressions to rotate 
       in the opposite direction */
      // rotate balls
      PVector[] bFinal = { 
        new PVector(), new PVector()
      };

      bFinal[0].x = cosine * bTemp[0].x - sine * bTemp[0].y;
      bFinal[0].y = cosine * bTemp[0].y + sine * bTemp[0].x;
      bFinal[1].x = cosine * bTemp[1].x - sine * bTemp[1].y;
      bFinal[1].y = cosine * bTemp[1].y + sine * bTemp[1].x;

      // update balls to screen position
      other.position.x = position.x + bFinal[1].x;
      other.position.y = position.y + bFinal[1].y;

      position.add(bFinal[0]);

      // update velocities
      velocity.x = (cosine * vFinal[0].x - sine * vFinal[0].y) * (other.size / 32);
      velocity.y = (cosine * vFinal[0].y + sine * vFinal[0].x) * (other.size / 32);
      other.velocity.x = (cosine * vFinal[1].x - sine * vFinal[1].y) * (size / 32);
      other.velocity.y = (cosine * vFinal[1].y + sine * vFinal[1].x) * (size / 32);
    }
  }
  
   public void takeInput() {
    int[] data = new int[3];
    int keyInput;
    if (key == CODED) {
     switch(keyCode) {
       case(UP):
       if (velocity.y > -3) {
         velocity.y -= 1;
         System.out.println("UP");
       }
         keyInput = 38;
         break;
       case(DOWN):
       if (velocity.y < 3) {
          velocity.y += 1;
          System.out.println("DOWN");
        }
         keyInput = 40;
         break;
       case(RIGHT):
        if (velocity.x < 3) {
          velocity.x += 1;
        }
         keyInput = 39;
         break;
       case(LEFT):
         if (velocity.x > -3) {
          velocity.x -= 1;
         }
         keyInput = 37;
         break;
       default:
         return;
     }
     data[0] = 1;
     data[1] = game.localPlayerID;
     data[2] = keyInput;
     
     protocol.send(data);
  }
  
  else {
    if(key == 'q') {
      
    }
  }
  }
};
public class Ring {
  int size;
  int position;
  
  Ring(float pos) {
    size = 900;
    position = (int)pos;
  }
  
   public void draw() {
    noFill();
    stroke(255);
    ellipse(position, position, size, size);
  }
}


  public void settings() { size(1000, 1000); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Board" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
